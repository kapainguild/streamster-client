<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:wpf="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:converters="clr-namespace:MaterialDesignThemes.Wpf.Converters;assembly=MaterialDesignThemes.Wpf">

    <SolidColorBrush x:Key="OnScreenForeground" Color="#cc000000"/>
    <SolidColorBrush x:Key="OnScreenBackground" Color="#99FFFFFF"/>
    <SolidColorBrush x:Key="OnScreenBorder" Color="#88000000"/>
    <SolidColorBrush x:Key="OnScreenForegroundMouseOver" Color="#DD000000"/>
    <SolidColorBrush x:Key="OnScreenBorderMouseOver" Color="#AA000000"/>
    <SolidColorBrush x:Key="OnScreenBackgroundMouseOver" Color="#AAaaccFF"/>
    <SolidColorBrush x:Key="OnScreenForegroundPressed" Color="#FF000000"/>
    <SolidColorBrush x:Key="OnScreenBorderPressed" Color="#FF000000"/>
    <SolidColorBrush x:Key="OnScreenBackgroundPressed" Color="#FFaaBBFF"/>

    <SolidColorBrush x:Key="OnScreenBackgroundDisabled" Color="#33FFFFFF"/>
    <SolidColorBrush x:Key="OnScreenBorderDisabled" Color="#66000000"/>

    <SolidColorBrush x:Key="OnScreenHighlightedForeground" Color="#1133aa"/>

    <Style x:Key="OnScreenChipCheckBox" TargetType="CheckBox">
        <Setter Property="Background" Value="{StaticResource OnScreenBackground}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{StaticResource OnScreenBorder}" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Height" Value="28" />
        <Setter Property="MinWidth" Value="46" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="Margin" Value="4" />
        <Setter Property="Foreground" Value="{StaticResource OnScreenForeground}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <!--<ControlTemplate.Resources>
                        <Style TargetType="{x:Type wpf:PackIcon}" >
                            <Setter Property="Width" Value="22" />
                            <Setter Property="Height" Value="22" />
                        </Style>
                    </ControlTemplate.Resources>-->
                    <Grid ClipToBounds="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Border x:Name="border" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" 
                                CornerRadius="14" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" />
                        <wpf:PackIcon x:Name="IconControl"
                                      Kind="Check"
                                      Width="16"
                                      Height="16"
                                      Margin="-16,0,0,0"
                                      VerticalAlignment="Center"
                                      Grid.Column="0"
                                      IsTabStop="False" />
                        <ContentControl Content="{TemplateBinding Content}"
                                        ContentTemplate="{TemplateBinding ContentTemplate}"
                                        ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                        ContentStringFormat="{TemplateBinding ContentTemplateSelector}"
                                        x:Name="Content"
                                        IsTabStop="False"
                                        VerticalAlignment="Center"
                                        HorizontalAlignment="Center"
                                        Margin="0 0 10 0"
                                        Grid.Column="1" />
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup Name="CheckStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition To="Checked">
                                        <Storyboard>
                                            <ThicknessAnimation Storyboard.TargetName="IconControl"
                                                                Storyboard.TargetProperty="Margin"
                                                                To="4,0,4,0" Duration="0:0:0.2" />
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition To="CheckedUnfocused">
                                        <Storyboard>
                                            <ThicknessAnimation Storyboard.TargetName="IconControl"
                                                                Storyboard.TargetProperty="Margin"
                                                                To="4,0,4,0" Duration="0:0:0.2" />
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition To="Unchecked">
                                        <Storyboard>
                                            <ThicknessAnimation Storyboard.TargetName="IconControl"
                                                                Storyboard.TargetProperty="Margin"
                                                                To="-16,0,10,0" Duration="0:0:0.2" />
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState Name="Checked">
                                    <Storyboard>
                                        <ThicknessAnimation Storyboard.TargetName="IconControl"
                                                            Storyboard.TargetProperty="Margin"
                                                            To="4,0,4,0" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="CheckedUnfocused">
                                    <Storyboard>
                                        <ThicknessAnimation Storyboard.TargetName="IconControl"
                                                            Storyboard.TargetProperty="Margin"
                                                            To="4,0,4,0" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState Name="Unchecked">
                                    <Storyboard>
                                        <ThicknessAnimation Storyboard.TargetName="IconControl"
                                                            Storyboard.TargetProperty="Margin"
                                                            To="-16,0,10,0" Duration="0" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource OnScreenBorderMouseOver}" />
                            <Setter Property="Background" TargetName="border" Value="{StaticResource OnScreenBackgroundMouseOver}" />
                            <Setter Property="Foreground" Value="{StaticResource OnScreenForegroundMouseOver}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource OnScreenBorderPressed}" />
                            <Setter Property="Background" TargetName="border" Value="{StaticResource OnScreenBackgroundPressed}" />
                            <Setter Property="Foreground" Value="{StaticResource OnScreenForegroundPressed}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.23"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="OnScreenOutlinedButton" TargetType="{x:Type ButtonBase}">

        <Setter Property="Foreground" Value="{StaticResource OnScreenForeground}" />
        <Setter Property="Background" Value="{StaticResource OnScreenBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource OnScreenBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="MinWidth" Value="40"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="wpf:ButtonAssist.CornerRadius" Value="20" />

        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
        <Setter Property="Cursor" Value="Hand" />
        
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Grid>
                        <Border Background="{TemplateBinding Background}"
                                x:Name="border" 
                                CornerRadius="{Binding Path=(wpf:ButtonAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                            <ContentPresenter Content="{TemplateBinding Content}" 
                                        ContentTemplate="{TemplateBinding ContentTemplate}" 
                                        Focusable="False"
                                        ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                        Margin="{TemplateBinding Padding}" 
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            </ContentPresenter>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource OnScreenBorderMouseOver}" />
                            <Setter Property="Background" TargetName="border" Value="{StaticResource OnScreenBackgroundMouseOver}" />
                            <Setter Property="Foreground" Value="{StaticResource OnScreenForegroundMouseOver}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource OnScreenBorderPressed}" />
                            <Setter Property="Background" TargetName="border" Value="{StaticResource OnScreenBackgroundPressed}" />
                            <Setter Property="Foreground" Value="{StaticResource OnScreenForegroundPressed}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.23"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="OnScreenActionToggleButton" TargetType="{x:Type ToggleButton}"
           BasedOn="{StaticResource OnScreenOutlinedButton}">
        <Setter Property="wpf:ToggleButtonAssist.OnContent" Value="{StaticResource CheckMarkIcon}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="0.23" Storyboard.TargetProperty="(UIElement.Opacity)" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="*" To="Checked">
                                        <Storyboard FillBehavior="HoldEnd">
                                            <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OffScaleTransform">
                                                <LinearDoubleKeyFrame Value="1" KeyTime="0:0:0.0" />
                                                <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OnScaleTransform">
                                                <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
                                                <LinearDoubleKeyFrame Value="1" KeyTime="0:0:0.2" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition From="Checked" To="Unchecked">
                                        <Storyboard FillBehavior="HoldEnd">
                                            <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OnScaleTransform">
                                                <LinearDoubleKeyFrame Value="1" KeyTime="0:0:0.0" />
                                                <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OffScaleTransform">
                                                <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
                                                <LinearDoubleKeyFrame Value="1" KeyTime="0:0:0.2" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OffScaleTransform"
                                                         To="0" />
                                        <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OnScaleTransform"
                                                         To="1" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OffScaleTransform"
                                                         To="1" />
                                        <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OnScaleTransform"
                                                         To="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="IndeterminateCheck"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid x:Name="OffGrid" RenderTransformOrigin=".5,.5">
                            <Border Background="{TemplateBinding Background}"
                                x:Name="border1" 
                                CornerRadius="{Binding Path=(wpf:ButtonAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                                <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                              FlowDirection="LeftToRight"/>
                            </Border>

                            <Grid.RenderTransform>
                                <ScaleTransform x:Name="OffScaleTransform" ScaleX="1" ScaleY="1" />
                            </Grid.RenderTransform>
                        </Grid>
                        <Grid x:Name="OnGrid" RenderTransformOrigin=".5,.5" >
                            <Border Background="{TemplateBinding Background}"
                                x:Name="border2" 
                                CornerRadius="{Binding Path=(wpf:ButtonAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              FlowDirection="LeftToRight"
                                              Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ToggleButtonAssist.OnContent)}"
                                              ContentTemplate="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ToggleButtonAssist.OnContentTemplate)}" />
                            </Border>

                            <Grid.RenderTransform>
                                <ScaleTransform x:Name="OnScaleTransform" ScaleX="0" ScaleY="1" />
                            </Grid.RenderTransform>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border1" Value="{StaticResource OnScreenBorderMouseOver}" />
                            <Setter Property="Background" TargetName="border1" Value="{StaticResource OnScreenBackgroundMouseOver}" />
                            <Setter Property="BorderBrush" TargetName="border2" Value="{StaticResource OnScreenBorderMouseOver}" />
                            <Setter Property="Background" TargetName="border2" Value="{StaticResource OnScreenBackgroundMouseOver}" />
                            <Setter Property="Foreground" Value="{StaticResource OnScreenForegroundMouseOver}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.23"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="OnScreenPopupBoxButton" TargetType="{x:Type ButtonBase}">
        <Setter Property="Height" Value="30"/>
        <Setter Property="MinWidth" Value="90"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="wpf:ButtonAssist.CornerRadius" Value="15" />

        <Setter Property="Foreground" Value="{StaticResource OnScreenForeground}" />
        <Setter Property="Background" Value="{StaticResource OnScreenBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource OnScreenBorderMouseOver}"/>
        <Setter Property="BorderThickness" Value="1"/>

        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
        <Setter Property="Cursor" Value="Hand" />

        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border Background="{TemplateBinding Background}"
                                x:Name="border" 
                                CornerRadius="{Binding Path=(wpf:ButtonAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                            <ContentPresenter Content="{TemplateBinding Content}" 
                                        ContentTemplate="{TemplateBinding ContentTemplate}" 
                                        Focusable="False"
                                        ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                        Margin="{TemplateBinding Padding}" 
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            </ContentPresenter>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsDefault" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="border" Value="#AAFF9999" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsDefault" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="border" Value="#AAffaaaa" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsDefault" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="border" Value="{StaticResource OnScreenBackgroundMouseOver}" />
                        </MultiTrigger>

                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource OnScreenBorderPressed}" />
                            <Setter Property="Foreground" Value="{StaticResource OnScreenForegroundPressed}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.23"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type wpf:PopupBox}" x:Key="OnScreenPopupBox">
        <Setter Property="Background" Value="{StaticResource OnScreenBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource OnScreenBorder}"/>
        <Setter Property="Foreground" Value="{StaticResource OnScreenForeground}"/>
        <Setter Property="PlacementMode" Value="TopAndAlignCentres" />
        <Setter Property="PopupMode" Value="Click" />
        <Setter Property="StaysOpen" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Cursor" Value="Hand"/>
        
        <Setter Property="Height" Value="30" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type wpf:PopupBox}">
                    <ControlTemplate.Resources>
                        <Style TargetType="ToggleButton" x:Key="ToggleButtonStyle">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="ToggleButton">
                                        <Grid x:Name="RootGrid" Background="{x:Null}">
                                            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
                                                    BorderThickness="{TemplateBinding BorderThickness}" 
                                                    CornerRadius="15"
                                                        x:Name="border">
                                                <ContentPresenter Content="{TemplateBinding Content}" 
                                                    ContentTemplate="{TemplateBinding ContentTemplate}" 
                                                    Focusable="False"
                                                    ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                    Margin="10,0" 
                                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                            </Border>
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsMouseOver" Value="true">
                                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource OnScreenBorderMouseOver}" />
                                                <Setter Property="Background" TargetName="border" Value="{StaticResource OnScreenBackgroundMouseOver}" />
                                                <Setter Property="Foreground" Value="{StaticResource OnScreenForegroundMouseOver}" />
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                        <Storyboard x:Key="Open">
                            <DoubleAnimation Storyboard.TargetName="PART_PopupContentControl" Storyboard.TargetProperty="Opacity"
                                             To="1" Duration="0:0:0.1">
                                <DoubleAnimation.EasingFunction>
                                    <SineEase EasingMode="EaseInOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation Storyboard.TargetName="PART_Toggle" Storyboard.TargetProperty="Opacity"
                                             To="0.4" Duration="0:0:0.1">
                                <DoubleAnimation.EasingFunction>
                                    <SineEase EasingMode="EaseInOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                        <Storyboard x:Key="Close">
                            <DoubleAnimation Storyboard.TargetName="PART_PopupContentControl" Storyboard.TargetProperty="Opacity"
                                             Duration="0:0:0.8">
                                <DoubleAnimation.EasingFunction>
                                    <SineEase EasingMode="EaseInOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                            <DoubleAnimation Storyboard.TargetName="PART_Toggle" Storyboard.TargetProperty="Opacity"
                                             To="1" Duration="0:0:0.1">
                                <DoubleAnimation.EasingFunction>
                                    <SineEase EasingMode="EaseInOut" />
                                </DoubleAnimation.EasingFunction>
                            </DoubleAnimation>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <Grid>
                        <ToggleButton x:Name="PART_Toggle" Style="{StaticResource ToggleButtonStyle}" 
                                      IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsPopupOpen, Mode=TwoWay}"                                      
                                      Cursor="Hand"
                                      Background="{TemplateBinding Background}"
                                      BorderBrush="{TemplateBinding BorderBrush}"
                                      Foreground="{TemplateBinding Foreground}"
                                      IsTabStop="{TemplateBinding IsTabStop}"
                                      VerticalAlignment="Stretch"
                                      HorizontalAlignment="Stretch"
                                      ToolTip="{TemplateBinding ToolTip}"
                                      ToolTipService.Placement="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=wpf:PopupBox}, Path=(ToolTipService.Placement)}"
                                      Content="{TemplateBinding ToggleContent}" ContentTemplate="{TemplateBinding ToggleContentTemplate}">
                        </ToggleButton>
                        <wpf:PopupEx x:Name="PART_Popup" 
                                          IsOpen="False"
                                          CustomPopupPlacementCallback="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PopupPlacementMethod}"
                                          PlacementTarget="{Binding ElementName=PART_Toggle}"
                                          Placement="Custom"
                                          PopupAnimation="None"
                                          AllowsTransparency="True">
                            <Grid>
                                <Border Background="White" Opacity="0.002" />
                                <ContentControl Content="{TemplateBinding PopupContent}" ContentTemplate="{TemplateBinding PopupContentTemplate}"      
                                                Visibility="{TemplateBinding IsEnabled, Converter={StaticResource BooleanToVisibilityConverter}}"
                                                Margin="0" Padding="8"
                                                Opacity="0" x:Name="PART_PopupContentControl">
                                </ContentControl>
                            </Grid>
                        </wpf:PopupEx>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPopupOpen" Value="True">
                            <Setter TargetName="PART_Toggle" Property="IsEnabled" Value="False" />
                            <Setter TargetName="PART_Popup" Property="IsOpen" Value="True" />
                            <Trigger.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource Open}" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource Close}" />
                            </Trigger.ExitActions>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="PopupMode" Value="MouseOverEager" />
                                <Condition Property="IsVisible" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Popup" Property="IsOpen" Value="True" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ToggleContent" Value="{StaticResource MaterialDesignMultiFloatingActionPopupBoxIcon}" />
        <Style.Triggers>
            <Trigger Property="UnfurlOrientation" Value="Horizontal">
                <Setter Property="ToolTipService.Placement" Value="Custom" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="OnScreenHideShowToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{StaticResource OnScreenForeground}" />
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="MinWidth" Value="30"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="wpf:ButtonAssist.CornerRadius" Value="20" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="0.23" Storyboard.TargetProperty="(UIElement.Opacity)" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="*" To="Checked">
                                        <Storyboard FillBehavior="HoldEnd">
                                            <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OffScaleTransform">
                                                <LinearDoubleKeyFrame Value="1" KeyTime="0:0:0.0" />
                                                <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OnScaleTransform">
                                                <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
                                                <LinearDoubleKeyFrame Value="1" KeyTime="0:0:0.2" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition From="Checked" To="Unchecked">
                                        <Storyboard FillBehavior="HoldEnd">
                                            <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OnScaleTransform">
                                                <LinearDoubleKeyFrame Value="1" KeyTime="0:0:0.0" />
                                                <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
                                            </DoubleAnimationUsingKeyFrames>
                                            <DoubleAnimationUsingKeyFrames Duration="0:0:0.2" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OffScaleTransform">
                                                <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.1" />
                                                <LinearDoubleKeyFrame Value="1" KeyTime="0:0:0.2" />
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OffScaleTransform"
                                                         To="0" />
                                        <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OnScaleTransform"
                                                         To="1" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OffScaleTransform"
                                                         To="1" />
                                        <DoubleAnimation Duration="0" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="OnScaleTransform"
                                                         To="0" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="IndeterminateCheck"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid x:Name="OffGrid" RenderTransformOrigin=".5,.5">
                            <Border Background="{TemplateBinding Background}"
                                x:Name="border1" 
                                CornerRadius="{Binding Path=(wpf:ButtonAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                                <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                                              FlowDirection="LeftToRight"/>
                            </Border>

                            <Grid.RenderTransform>
                                <ScaleTransform x:Name="OffScaleTransform" ScaleX="1" ScaleY="1" />
                            </Grid.RenderTransform>
                        </Grid>
                        <Grid x:Name="OnGrid" RenderTransformOrigin=".5,.5" >
                            <Border Background="{TemplateBinding Background}"
                                x:Name="border2" 
                                CornerRadius="{Binding Path=(wpf:ButtonAssist.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              FlowDirection="LeftToRight"
                                              Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ToggleButtonAssist.OnContent)}"
                                              ContentTemplate="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(wpf:ToggleButtonAssist.OnContentTemplate)}" />
                            </Border>

                            <Grid.RenderTransform>
                                <ScaleTransform x:Name="OnScaleTransform" ScaleX="0" ScaleY="1" />
                            </Grid.RenderTransform>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Foreground" Value="White" />
                            <Setter Property="Background" TargetName="border1" Value="{DynamicResource PrimaryHueMidBrush}" />
                            <Setter Property="Background" TargetName="border2" Value="{DynamicResource PrimaryHueMidBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.23"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>