<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:models="clr-namespace:Streamster.ClientCore.Models;assembly=Streamster.ClientCore"
                    xmlns:data="clr-namespace:Streamster.ClientData.Model;assembly=Streamster.ClientData"
                    xmlns:support="clr-namespace:Streamster.ClientApp.Win.Support" 
                    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:controlzEx="clr-namespace:ControlzEx;assembly=MaterialDesignThemes.Wpf" xmlns:oxy="http://oxyplot.org/wpf">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Common.xaml"/>
        <ResourceDictionary Source="OnScreenStyles.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <DataTemplate DataType="{x:Type data:ProcessLoad}">
        <DockPanel TextElement.FontWeight="Normal" TextElement.FontSize="12">
            <TextBlock DockPanel.Dock="Right" Text="{Binding Load}" TextAlignment="Right" Width="25" Foreground="#999999"/>
            <TextBlock Text="{Binding Name}" TextTrimming="CharacterEllipsis" Foreground="#999999"/>
        </DockPanel>
    </DataTemplate>

    <DataTemplate DataType="{x:Type models:IndicatorModelRestreamChannel}">
        <DockPanel x:Name="root" TextElement.FontWeight="Normal" TextElement.Foreground="Red">
            <TextBlock Margin="10,0,0,0" DockPanel.Dock="Right" Text="{Binding Bitrate}" TextAlignment="Right"/>
            <TextBlock Text="{Binding Name}" TextTrimming="CharacterEllipsis" />
        </DockPanel>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding State}" Value="RunningOk">
                <Setter TargetName="root" Property="TextElement.Foreground" Value="Green"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    
    
    <Style x:Key="NormalIndicator" TargetType="{x:Type support:Indicator}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Margin" Value="5,3,5,7"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type support:Indicator}">
                    <Grid x:Name="root" HorizontalAlignment="Right">
                        <ToggleButton x:Name="toggle" Style="{StaticResource EmptyButton}">
                            <ToggleButton.ToolTip>
                                <StackPanel>
                                    <TextBlock HorizontalAlignment="Center" Text="{TemplateBinding DetailedDescription}"/>
                                    <TextBlock HorizontalAlignment="Center" Text="Click here to get more details"/>
                                </StackPanel>
                            </ToggleButton.ToolTip>
                            <Grid  Width="50" Height="50" UseLayoutRounding="True">
                                <Border x:Name="smallBorder" BorderThickness="2" Margin="0,12,0,0" CornerRadius="5" Background="#2f2f2f" SnapsToDevicePixels="True" BorderBrush="Red" Opacity="0.3"/>
                                <Border Margin="0,12,0,0" Width="28" Height="3" HorizontalAlignment="Center" VerticalAlignment="Top" Background="Black" SnapsToDevicePixels="True" />

                                <ContentPresenter x:Name="smallIcon" Margin="13,0,10,8" Content="{TemplateBinding SmallIcon}" HorizontalAlignment="Left" VerticalAlignment="Top"/>

                                <ContentPresenter x:Name="smallValue" Margin="0,0,0,5" HorizontalAlignment="Center" VerticalAlignment="Bottom" Content="{TemplateBinding SmallContent}"/>
                            </Grid>
                        </ToggleButton>
                        <controlzEx:PopupEx x:Name="PART_Popup" 
                                          IsOpen="{Binding IsChecked, ElementName=toggle}"
                                          PlacementTarget="{Binding ElementName=toggle}"
                                        HorizontalOffset="0"
                                        VerticalOffset="0"
                                        StaysOpen="False"
                                          Placement="Relative"
                                          PopupAnimation="Fade"
                                          AllowsTransparency="True">
                            <ToggleButton Style="{StaticResource EmptyButton}" IsChecked="{Binding IsChecked, ElementName=toggle}">
                                <Grid>
                                    <Border BorderThickness="2" Margin="0,12,0,0" CornerRadius="5" Background="#0E0E0E" SnapsToDevicePixels="True" BorderBrush="#1E1E1E">
                                    </Border>
                                    <Border Margin="12,12,0,0" Width="28" Height="3" HorizontalAlignment="Left" VerticalAlignment="Top" Background="Black" SnapsToDevicePixels="True" >
                                    </Border>
                                    <ContentPresenter x:Name="bigIcon" Margin="13,0,10,8" Content="{TemplateBinding BigIcon}" HorizontalAlignment="Left" VerticalAlignment="Top"/>

                                    <ContentPresenter x:Name="content" Margin="10,27,10,10" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"/>
                                </Grid>
                            </ToggleButton>
                        </controlzEx:PopupEx>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="State" Value="Ok">
                            <Setter TargetName="smallBorder" Property="BorderBrush" Value="Green"/>
                            <Setter TargetName="smallIcon" Property="TextElement.Foreground" Value="Green"/>
                            <Setter TargetName="smallValue" Property="TextElement.Foreground" Value="Green"/>
                            <Setter TargetName="bigIcon" Property="TextElement.Foreground" Value="Green"/>
                            <Setter TargetName="content" Property="TextElement.Foreground" Value="#40FF40"/>
                        </Trigger>

                        <Trigger Property="State" Value="Warning">
                            <Setter TargetName="smallBorder" Property="BorderBrush" Value="Orange"/>
                            <Setter TargetName="smallIcon" Property="TextElement.Foreground" Value="Orange"/>
                            <Setter TargetName="smallValue" Property="TextElement.Foreground" Value="Orange"/>
                            <Setter TargetName="bigIcon" Property="TextElement.Foreground" Value="Orange"/>
                            <Setter TargetName="content" Property="TextElement.Foreground" Value="#FFC020"/>
                        </Trigger>

                        <Trigger Property="State" Value="Error">
                            <Setter TargetName="smallBorder" Property="BorderBrush" Value="Red"/>
                            <Setter TargetName="smallIcon" Property="TextElement.Foreground" Value="Red"/>
                            <Setter TargetName="smallValue" Property="TextElement.Foreground" Value="Red"/>
                            <Setter TargetName="bigIcon" Property="TextElement.Foreground" Value="Red"/>
                            <Setter TargetName="content" Property="TextElement.Foreground" Value="#FF4040"/>
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="smallBorder" Property="Opacity" Value="0.6"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="HorizontalIndicator" TargetType="{x:Type support:Indicator}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Margin" Value="3,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type support:Indicator}">
                    <Grid x:Name="root">
                        <ToggleButton  MinWidth="60" Margin="0,1" x:Name="toggle" Style="{StaticResource EmptyButton}" >
                            <ToggleButton.ToolTip>
                                <StackPanel>
                                    <TextBlock HorizontalAlignment="Center" Text="{TemplateBinding DetailedDescription}"/>
                                    <TextBlock HorizontalAlignment="Center" Text="Click here to get more details"/>
                                </StackPanel>
                            </ToggleButton.ToolTip>
                            <Grid x:Name="contentOfButton" UseLayoutRounding="True">
                                <Border x:Name="smallBorder" CornerRadius="5" Background="#2f2f2f" SnapsToDevicePixels="True" Opacity="0"/>

                                <StackPanel Margin="3,0,0,0" Orientation="Horizontal" HorizontalAlignment="Left" Height="25">
                                    <ContentPresenter x:Name="smallIcon" Content="{TemplateBinding SmallIcon}" VerticalAlignment="Center"/>
                                    <ContentPresenter x:Name="smallValue" Margin="3,2,0,0" VerticalAlignment="Center" Content="{TemplateBinding SmallContent}"/>
                                </StackPanel>
                            </Grid>
                        </ToggleButton>
                        <controlzEx:PopupEx x:Name="PART_Popup" 
                                          IsOpen="{Binding IsChecked, ElementName=toggle}"
                                          PlacementTarget="{Binding ElementName=toggle}"
                                        HorizontalOffset="0"
                                        VerticalOffset="0"
                                        StaysOpen="False"
                                          Placement="Relative"
                                          PopupAnimation="Fade"
                                          AllowsTransparency="True">
                            <ToggleButton Style="{StaticResource EmptyButton}" IsChecked="{Binding IsChecked, ElementName=toggle}">
                                <Grid>
                                    <Border BorderThickness="2" Margin="0,12,0,0" CornerRadius="5" Background="#0E0E0E" SnapsToDevicePixels="True" BorderBrush="#1E1E1E">
                                    </Border>
                                    <Border Margin="12,12,0,0" Width="28" Height="3" HorizontalAlignment="Left" VerticalAlignment="Top" Background="Black" SnapsToDevicePixels="True" >
                                    </Border>
                                    <ContentPresenter x:Name="bigIcon" Margin="13,0,10,8" Content="{TemplateBinding BigIcon}" HorizontalAlignment="Left" VerticalAlignment="Top"/>

                                    <ContentPresenter x:Name="content" Margin="10,27,10,10" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"/>
                                </Grid>
                            </ToggleButton>
                        </controlzEx:PopupEx>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger SourceName="toggle" Property="IsChecked" Value="True">
                            <Setter TargetName="contentOfButton" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="State" Value="Ok">
                            <Setter TargetName="smallBorder" Property="BorderBrush" Value="Green"/>
                            <Setter TargetName="smallIcon" Property="TextElement.Foreground" Value="Green"/>
                            <Setter TargetName="smallValue" Property="TextElement.Foreground" Value="Green"/>
                            <Setter TargetName="bigIcon" Property="TextElement.Foreground" Value="Green"/>
                            <Setter TargetName="content" Property="TextElement.Foreground" Value="#40FF40"/>
                        </Trigger>

                        <Trigger Property="State" Value="Warning">
                            <Setter TargetName="smallBorder" Property="BorderBrush" Value="Orange"/>
                            <Setter TargetName="smallIcon" Property="TextElement.Foreground" Value="Orange"/>
                            <Setter TargetName="smallValue" Property="TextElement.Foreground" Value="Orange"/>
                            <Setter TargetName="bigIcon" Property="TextElement.Foreground" Value="Orange"/>
                            <Setter TargetName="content" Property="TextElement.Foreground" Value="#FFC020"/>
                        </Trigger>

                        <Trigger Property="State" Value="Error">
                            <Setter TargetName="smallBorder" Property="BorderBrush" Value="Red"/>
                            <Setter TargetName="smallIcon" Property="TextElement.Foreground" Value="Red"/>
                            <Setter TargetName="smallValue" Property="TextElement.Foreground" Value="Red"/>
                            <Setter TargetName="bigIcon" Property="TextElement.Foreground" Value="Red"/>
                            <Setter TargetName="content" Property="TextElement.Foreground" Value="#FF4040"/>
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="smallBorder" Property="Opacity" Value="0.8"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="TextBlock" x:Key="recommendation">
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Foreground" Value="#999999"/>
        <Setter Property="Margin" Value="10,0,10,3"/>
        <Setter Property="FontWeight" Value="Normal"/>
    </Style>

    <DataTemplate x:Key="CpuDetails" DataType="{x:Type models:IndicatorModelCpu}">
        <StackPanel Width="275" >
            <TextBlock FontSize="18" Text="{Binding DetailedDescription.Value}" TextAlignment="Center"/>

            <DockPanel Margin="10,10,10,3" TextElement.FontWeight="Normal" TextElement.Foreground="White">
                <TextBlock DockPanel.Dock="Right" Text="%" TextAlignment="Right" Width="25"/>
                <TextBlock Text="Top 3 greedy application" TextTrimming="CharacterEllipsis"/>
            </DockPanel>
                            
            <ItemsControl Margin="10,0,10,0" ItemsSource="{Binding Processes.Value}"/>

            <TextBlock Text="CPU load over last 2 minutes" Margin="10,12,0,3" FontWeight="Normal" Foreground="White"/>

            <oxy:PlotView Model="{Binding ChartModel.PlotModel}" Foreground="Black"  Background="#0E0E0E" Height="200" Margin="10,0" />

            <TextBlock Text="Hints to decrease the load:" Margin="10,12,0,3" FontWeight="Normal" Foreground="White"/>
            <TextBlock Text="- close unused applications" Style="{StaticResource recommendation}"/>
            <TextBlock Text="- close unused tabs in browser" Style="{StaticResource recommendation}"/>
            <TextBlock Text="- choose 'speed' for encoding in settings" Style="{StaticResource recommendation}"/>
            <TextBlock Text="- hide video preview" Style="{StaticResource recommendation}"/>
            <TextBlock Text="- choose '#nofilter' in filters" Style="{StaticResource recommendation}"/>
            <TextBlock Text="- decrease FPS and/or Resolution" Style="{StaticResource recommendation}"/>
            <TextBlock Text="- reboot your system" Style="{StaticResource recommendation}"/>
        </StackPanel>
    </DataTemplate>

    <DataTemplate x:Key="CloudOutDetails" DataType="{x:Type models:IndicatorModelCloudOut}">
        <StackPanel Width="265">
            <TextBlock FontSize="18" Text="{Binding DetailedDescription.Value}" TextAlignment="Center"/>

            <TextBlock Text="Bitrate over last 2 minutes" Margin="10,12,0,3" FontWeight="Normal" Foreground="White"/>

            <oxy:PlotView Model="{Binding ChartModel.PlotModel}" Foreground="Black"  Background="#0E0E0E" Height="200" Margin="10,0" />

            <TextBlock Text="Hints to fix possible issues:" Margin="10,12,0,3" FontWeight="Normal" Foreground="White"/>
            <TextBlock Text="- decrease Bitrate" Style="{StaticResource recommendation}"/>
            <TextBlock Text="- contact your internet provider" Style="{StaticResource recommendation}"/>
            <TextBlock Text="- ensure strong WiFi signal" Style="{StaticResource recommendation}"/>
        </StackPanel>
        <DataTemplate.Triggers>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="CloudInDetails" DataType="{x:Type models:IndicatorModelCloudIn}">
        <StackPanel Width="265">
            <TextBlock FontSize="18" Text="{Binding DetailedDescription.Value}" TextAlignment="Center"/>

            <TextBlock Text="Bitrate over last 2 minutes" Margin="20,12,0,3" FontWeight="Normal" Foreground="#999999"/>

            <oxy:PlotView Model="{Binding ChartModel.PlotModel}" Foreground="Black"  Background="#0E0E0E" Height="200" Margin="0,0" />
        </StackPanel>
        <DataTemplate.Triggers>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="InputDetails" DataType="{x:Type models:IndicatorModelInput}">
        <StackPanel Width="265">
            <TextBlock FontSize="18" Text="{Binding DetailedDescription.Value}" TextAlignment="Center"/>
            <TextBlock Text="Camera FPS over last 2 minutes" Margin="20,12,0,3" FontWeight="Normal" Foreground="White"/>
            <oxy:PlotView Model="{Binding ChartModel.PlotModel}" Foreground="Black"  Background="#0E0E0E" Height="200" Margin="10,0" />
            <TextBlock Text="Hints to fix possible issues:" Margin="10,12,0,3" FontWeight="Normal" Foreground="White"/>
            <TextBlock Text="- ensure you have enough light" Style="{StaticResource recommendation}"/>
            <TextBlock Text="- check settings of virtual camera/software" Style="{StaticResource recommendation}"/>
        </StackPanel>
        <DataTemplate.Triggers>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="EncoderDetails" DataType="{x:Type models:IndicatorModelEncoder}">
        <StackPanel Width="265">
            <TextBlock FontSize="18" Text="{Binding DetailedDescription.Value}" TextAlignment="Center"/>
            <TextBlock Text="Encoder overload over last 2 minutes" Margin="10,12,0,3" FontWeight="Normal" Foreground="White"/>
            <oxy:PlotView Model="{Binding ChartModel.PlotModel}" Foreground="Black"  Background="#0E0E0E" Height="200" Margin="10,0" />

            <TextBlock Text="Hints to decrease the load:" Margin="10,12,0,3" FontWeight="Normal" Foreground="White"/>
            <TextBlock Text="- close unused applications" Style="{StaticResource recommendation}"/>
            <TextBlock Text="- close unused tabs in browser" Style="{StaticResource recommendation}"/>
            <TextBlock Text="- choose 'speed' for encoding in settings" Style="{StaticResource recommendation}"/>
            <TextBlock Text="- hide video preview" Style="{StaticResource recommendation}"/>
            <TextBlock Text="- choose '#nofilter' in filters" Style="{StaticResource recommendation}"/>
            <TextBlock Text="- decrease FPS and/or Resolution" Style="{StaticResource recommendation}"/>
            <TextBlock Text="- reboot your system" Style="{StaticResource recommendation}"/>
        </StackPanel>
        <DataTemplate.Triggers>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="RestreamDetails" DataType="{x:Type models:IndicatorModelRestream}">
        <StackPanel Width="265" >
            <TextBlock FontSize="18" Text="{Binding DetailedDescription.Value}" TextAlignment="Center"/>

            <DockPanel Margin="20,10,10,3" TextElement.FontWeight="Normal" TextElement.Foreground="#999999">
                <TextBlock DockPanel.Dock="Right" Text="Bitrate, Kb/s" TextAlignment="Right" />
                <TextBlock Text="Restreaming channels" TextTrimming="CharacterEllipsis"/>
            </DockPanel>

            <ItemsControl Margin="20,0,10,0" ItemsSource="{Binding Channels.Value}"/>

            <TextBlock Text="Total restreaming bitrate, Mb/s" Margin="20,12,0,3" FontWeight="Normal" Foreground="#999999"/>

            <oxy:PlotView Model="{Binding ChartModel.PlotModel}" Foreground="Black"  Background="#0E0E0E" Height="200" Margin="0,0" />
        </StackPanel>
    </DataTemplate>


    <DataTemplate x:Key="NormalSizeDeviceIndicatorsTemplate" DataType="{x:Type models:DeviceIndicatorsModel}">
        <StackPanel x:Name="root" Orientation="Vertical" Margin="0,5">

            <TextBlock x:Name="name" HorizontalAlignment="Center" VerticalAlignment="Center" Text="{Binding Name.Value}" Foreground="#909090" FontSize="10" FontWeight="Normal"/>

            <TextBlock x:Name="offline" Margin="3" HorizontalAlignment="Center" VerticalAlignment="Center" Text="Offline" Foreground="Orange" FontSize="10" Visibility="Collapsed"/>

            <StackPanel x:Name="indicators" Orientation="Vertical">
                <support:Indicator x:Name="cpu"
                               DataContext="{Binding Cpu}"
                               Content="{Binding}" 
                               ContentTemplate="{StaticResource CpuDetails}"
                               State="{Binding State.Value}"
                               DetailedDescription="{Binding DetailedDescription.Value}">
                    <support:Indicator.SmallIcon>
                        <materialDesign:PackIcon  Margin="0,2,0,0" Kind="AlphaCCircle" Width="24" Height="24"/>
                    </support:Indicator.SmallIcon>
                    <support:Indicator.BigIcon>
                        <materialDesign:PackIcon  Margin="0,2,0,0" Kind="AlphaCCircle" Width="24" Height="24"/>
                    </support:Indicator.BigIcon>
                    <support:Indicator.SmallContent>
                        <TextBlock FontWeight="Black" FontSize="16" Text="{Binding Value.Value}" />
                    </support:Indicator.SmallContent>
                </support:Indicator>

                <support:Indicator x:Name="input"
                               DataContext="{Binding Input}"
                               Content="{Binding }" 
                               ContentTemplate="{StaticResource InputDetails}" 
                               State="{Binding State.Value}"
                               DetailedDescription="{Binding DetailedDescription.Value}">
                    <support:Indicator.SmallIcon>
                        <materialDesign:PackIcon  Margin="0,0,0,0" Kind="Webcam" Width="24" Height="24"/>
                    </support:Indicator.SmallIcon>
                    <support:Indicator.BigIcon>
                        <materialDesign:PackIcon  Margin="0,0,0,0" Kind="Webcam" Width="24" Height="24"/>
                    </support:Indicator.BigIcon>
                    <support:Indicator.SmallContent>
                        <TextBlock FontWeight="Black" FontSize="16" Text="{Binding Value.Value}" />
                    </support:Indicator.SmallContent>
                </support:Indicator>

                <support:Indicator x:Name="encoder"
                               DataContext="{Binding Encoder}"
                               Content="{Binding }" 
                               ContentTemplate="{StaticResource EncoderDetails}" 
                               State="{Binding State.Value}"
                               DetailedDescription="{Binding DetailedDescription.Value}">
                    <support:Indicator.SmallIcon>
                        <materialDesign:PackIcon  Margin="0,0,0,0" Kind="CogBox" Width="24" Height="24"/>
                    </support:Indicator.SmallIcon>
                    <support:Indicator.BigIcon>
                        <materialDesign:PackIcon  Margin="0,0,0,0" Kind="CogBox" Width="24" Height="24"/>
                    </support:Indicator.BigIcon>
                    <support:Indicator.SmallContent>
                        <TextBlock FontWeight="Black" FontSize="16" Text="{Binding Value.Value}" />
                    </support:Indicator.SmallContent>
                </support:Indicator>

                <support:Indicator x:Name="cloudIn"
                               DataContext="{Binding CloudIn}"
                               Content="{Binding }" 
                               ContentTemplate="{StaticResource CloudInDetails}" 
                               State="{Binding State.Value}"
                               DetailedDescription="{Binding DetailedDescription.Value}">
                    <support:Indicator.SmallIcon>
                        <materialDesign:PackIcon  Margin="0,0,0,0" Kind="CloudDownload" Width="24" Height="24"/>
                    </support:Indicator.SmallIcon>
                    <support:Indicator.BigIcon>
                        <materialDesign:PackIcon  Margin="0,0,0,0" Kind="CloudDownload" Width="24" Height="24"/>
                    </support:Indicator.BigIcon>
                    <support:Indicator.SmallContent>
                        <StackPanel Margin="0,0,0,2" Orientation="Horizontal">
                            <TextBlock FontWeight="Black" FontSize="16" Text="{Binding Value.Value}" />
                            <TextBlock Margin="0,0,0,1" FontWeight="Bold" FontSize="11" Text="{Binding SmallValue.Value}" VerticalAlignment="Bottom"/>
                        </StackPanel>
                    </support:Indicator.SmallContent>
                </support:Indicator>

                <support:Indicator x:Name="cloudOut"
                               DataContext="{Binding CloudOut}"
                               Content="{Binding }" 
                               ContentTemplate="{StaticResource CloudOutDetails}" 
                               State="{Binding State.Value}"
                               DetailedDescription="{Binding DetailedDescription.Value}">
                    <support:Indicator.SmallIcon>
                        <materialDesign:PackIcon  Margin="0,0,0,0" Kind="CloudUpload" Width="24" Height="24"/>
                    </support:Indicator.SmallIcon>
                    <support:Indicator.BigIcon>
                        <materialDesign:PackIcon  Margin="0,0,0,0" Kind="CloudUpload" Width="24" Height="24"/>
                    </support:Indicator.BigIcon>
                    <support:Indicator.SmallContent>
                        <StackPanel Margin="0,0,0,2" Orientation="Horizontal">
                            <TextBlock FontWeight="Black" FontSize="16" Text="{Binding Value.Value}" />
                            <TextBlock Margin="0,0,0,1" FontWeight="Bold" FontSize="11" Text="{Binding SmallValue.Value}" VerticalAlignment="Bottom"/>
                        </StackPanel>
                    </support:Indicator.SmallContent>
                </support:Indicator>

                <support:Indicator x:Name="restream"
                               DataContext="{Binding Restream}"
                               Content="{Binding }" 
                               ContentTemplate="{StaticResource RestreamDetails}" 
                               State="{Binding State.Value}"
                               DetailedDescription="{Binding DetailedDescription.Value}">
                    <support:Indicator.SmallIcon>
                        <materialDesign:PackIcon  Margin="0,0,0,0" Kind="HexagonMultiple" Width="24" Height="24"/>
                    </support:Indicator.SmallIcon>
                    <support:Indicator.BigIcon>
                        <materialDesign:PackIcon  Margin="0,0,0,0" Kind="HexagonMultiple" Width="24" Height="24"/>
                    </support:Indicator.BigIcon>
                    <support:Indicator.SmallContent>
                        <TextBlock FontWeight="Black" FontSize="16" Text="{Binding Value.Value}" />
                    </support:Indicator.SmallContent>
                </support:Indicator>
            </StackPanel>
        </StackPanel>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding (support:ResponsiveHost.Calculation).Values.IndicatorsHorizontal, ElementName=root}" Value="True">
                <Setter TargetName="root" Property="Orientation" Value="Horizontal"/>
                <Setter TargetName="indicators" Property="Orientation" Value="Horizontal"/>
                <Setter TargetName="root" Property="Margin" Value="5,0"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Offline.Value}" Value="True">
                <Setter TargetName="offline" Property="Visibility" Value="Visible"/>
                <Setter TargetName="indicators" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Name.Value}" Value="{x:Null}">
                <Setter TargetName="name" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Name.Value}" Value="{x:Null}">
                <Setter TargetName="name" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Cpu.State.Value}" Value="Unknown">
                <Setter TargetName="cpu" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Input.State.Value}" Value="Unknown">
                <Setter TargetName="input" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Encoder.State.Value}" Value="Unknown">
                <Setter TargetName="encoder" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding CloudIn.State.Value}" Value="Unknown">
                <Setter TargetName="cloudIn" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            
            <DataTrigger Binding="{Binding CloudOut.State.Value}" Value="Unknown">
                <Setter TargetName="cloudOut" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Restream.State.Value}" Value="Unknown">
                <Setter TargetName="restream" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    

    <DataTemplate x:Key="NormalSizeIndicators" DataType="{x:Type models:MainIndicatorsModel}">
        <Viewbox Stretch="Uniform" HorizontalAlignment="Right" VerticalAlignment="Center" StretchDirection="DownOnly">
            <Viewbox.Resources>
                <Style TargetType="{x:Type support:Indicator}" BasedOn="{StaticResource NormalIndicator}"/>
            </Viewbox.Resources>
            <StackPanel Orientation="Vertical" >
                <ItemsControl ItemsSource="{Binding Devices}" ItemTemplate="{StaticResource NormalSizeDeviceIndicatorsTemplate}"/>
            </StackPanel>
        </Viewbox>
    </DataTemplate>

    <DataTemplate x:Key="HorizontalIndicators" DataType="{x:Type models:MainIndicatorsModel}">
        <Viewbox Stretch="Uniform" HorizontalAlignment="Center" VerticalAlignment="Center" StretchDirection="DownOnly">
            <Viewbox.Resources>
                <Style TargetType="{x:Type support:Indicator}" BasedOn="{StaticResource HorizontalIndicator}"/>
            </Viewbox.Resources>
            <StackPanel Orientation="Horizontal" >
                <ItemsControl ItemsSource="{Binding Devices}" ItemTemplate="{StaticResource NormalSizeDeviceIndicatorsTemplate}">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <StackPanel Orientation="Horizontal"/>
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                </ItemsControl>
            </StackPanel>
        </Viewbox>
    </DataTemplate>

   
</ResourceDictionary>